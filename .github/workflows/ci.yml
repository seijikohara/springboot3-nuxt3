name: CI

on:
  push:

permissions:
  contents: write

jobs:
  format:
    runs-on: ubuntu-latest
    steps:
      - name: Generate GitHub App Token
        id: generate_token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ vars.DEV_AUTOMATION_APP_ID }}
          private-key: ${{ secrets.DEV_AUTOMATION_PRIVATE_KEY }}

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ steps.generate_token.outputs.token }}
          fetch-depth: 0  # Ensure full history is available for commit
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: temurin
          cache: gradle
      - name: Run Spotless Apply
        run: ./gradlew spotlessApply --no-daemon
      - name: Commit changes if any
        run: |
          git config --global user.name '${{ steps.generate_token.outputs.app-slug }}[bot]'
          git config --global user.email '${{ steps.generate_token.outputs.app-slug }}[bot]@users.noreply.github.com'
          git add .
          if ! git diff --cached --exit-code; then
            git commit -m "style: apply code formatting with Spotless"
            git push
          fi
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}

  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"
          cache: "gradle"
      - name: Build
        run: ./gradlew clean build --no-daemon --stacktrace

  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json
      - name: Install dependencies
        run: npm install
        working-directory: frontend
      - name: Build
        run: npm run build
        working-directory: frontend

  build-docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Start application
        run: docker compose up -d app
      - name: Health Check
        uses: emilioschepis/wait-for-endpoint@v1.0.4
        with:
          url: http://localhost:18080/health
          method: GET
          expected-status: 200
          timeout: 60000
          interval: 1000
